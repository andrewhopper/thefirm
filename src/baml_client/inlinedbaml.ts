/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n    temperature 0.0\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "daily_plan.baml": "enum EisenHowerAttribute {\n    IMPORTANT\n    NOT_IMPORTANT\n    URGENT\n    NOT_URGENT\n}\n\nenum EisenHowerMatrix {\n    DO_IT_NOW\n    SCHEDULE_IT\n    DELEGATE_IT\n    DELETE_IT\n}\n\nenum UrgencyOptions {\n    NOW\n    MORNING\n    AFTERNOON\n    EVENING\n    TODAY\n    TOMORROW\n    THIS_WEEK\n    NEXT_WEEK\n    THIS_MONTH\n    NEXT_MONTH\n    THIS_YEAR\n    NEXT_YEAR\n    ANYTIME\n    UNSPECIFIED\n}\n\n\nclass Task  {\n    guid string\n    created_at string\n    updated_at string\n    creators string[]\n    name string\n    description string\n    version int\n    task string\n    eh_importance EisenHowerAttribute\n    eh_urgency EisenHowerAttribute\n    eh_matrix EisenHowerMatrix\n    urgency UrgencyOptions\n}\n\n\nclass TaskList  {\n      guid string\n    created_at string\n\n    updated_at string\n    \n    creators string[]\n    \n    name string\n    \n    description string\n    \n    version int\n    tasks Task[]\n   \n}\n\n\nfunction DailyPlan(prompt: string) -> TaskList {\n  client CustomGPT4o\n  prompt #\"\n    {{ prompt }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest daily_plan_1 {\n    functions [DailyPlan]\n    args {\n        prompt #\"\n          Brush teeth, eat breakfast, go to work.\n        \"#\n    }\n} ",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.69.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "generic.baml": "\n\n\nfunction GenericCall(context: string) -> string {\n  client CustomGPT4o\n \n  prompt #\"\n    {{ context }} \n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\ntest market_research {\n    functions [GenericCall]\n    args {\n        context #\"\n          You are a market research expert.\n\n        \"#\n      \n    }\n} ",
  "market_research.baml": "class ReportSectionContent{\n   guid string\n    created_at string\n    upstringd_at string\n    creators string[]\n    name string\n    description string\n    version int\n    content string\n    \n}\n\nclass ReportSection{\n    guid string\n    created_at string\n    upstringd_at string\n    creators string[]\n    name string\n    description string\n    version int\n    section_title string\n    section_content ReportSectionContent[]\n    position int\n    \n}\n\nclass ReportArtifact{\n     guid string\n    created_at string\n    upstringd_at string\n    creators string[]\n    name string\n    description string\n    version int\n    executive_summary string\n    \n}\n\nenum ReportType {\n    RESEARCH\n    REPORT\n    MARKET_RESEARCH\n    UX_RESEARCH\n    UX_DESIGN\n    UX_PROTOTYPE\n    UX_TESTING\n    BUSINESS_PLAN\n    MARKETING_PLAN\n    FINANCIAL_PLAN\n    OPERATIONAL_PLAN\n}\n\nclass ResearchArtifact  {\n    guid string\n    created_at string\n    upstringd_at string\n    creators string[]\n    name string\n    description string\n    version int\n    authors string[]\n    title string\n    content ReportArtifact\n}\n\n\nfunction MarketResearch(context: string, task: string) -> string {\n  client CustomGPT4o\n \n  prompt #\"\n    {{ context }} \n    {{ task }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\ntest market_research {\n    functions [MarketResearch]\n    args {\n        context #\"\n          You are a market research expert.\n\n        \"#\n        task #\"\n          Generate a market research report on the topic of \"AI in healthcare\".\n        \"#\n    }\n} ",
  "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}